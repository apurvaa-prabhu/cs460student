<!DOCTYPE html>
<html>
  <head>
    <meta content="text/html;charset=utf-8" http-equiv="Content-Type">
    <meta content="utf-8" http-equiv="encoding">
    <title>Assignment 4 â€“ Flashy Fish</title>
    <style>
      html, body { 
        background-color:#000;
        margin: 0;
        padding: 0;
        height: 100%;
        overflow: hidden !important;  
        background: url('https://cs460.org/assignments/04/bg.jpg');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
      }
      #c { width: 100%; height: 100%; display: block; }
    </style>
  </head>

  <script type="text/javascript" src="https://cs460.org/js/glmatrix.js"></script>

  <script id="vertexshader" type="glsl">
    attribute vec3 a_position;
    uniform mat4 u_transform;
    uniform float u_pointsize;
    void main(void) {
      gl_Position = u_transform * vec4(a_position, 1.0);
      gl_PointSize = u_pointsize;
    }
  </script>

  <script id="fragmentshader" type="glsl">
    precision mediump float;
    uniform vec4 u_color;
    void main(void) { gl_FragColor = u_color; }
  </script>

  <script>
    let c, gl;
    let shaderprogram;
    let all_fish = [];
    let a_position, u_transform, u_color, u_pointsize;

    window.onload = function () {
      c = document.getElementById('c');
      c.width = innerWidth;
      c.height = innerHeight;

      gl = c.getContext('webgl');
      if (!gl) { alert('WebGL not supported'); return; }
      gl.viewport(0, 0, c.width, c.height);

      const v_shader = gl.createShader(gl.VERTEX_SHADER);
      const f_shader = gl.createShader(gl.FRAGMENT_SHADER);
      gl.shaderSource(v_shader, document.getElementById('vertexshader').textContent);
      gl.shaderSource(f_shader, document.getElementById('fragmentshader').textContent);
      gl.compileShader(v_shader);
      gl.compileShader(f_shader);
      if (!gl.getShaderParameter(v_shader, gl.COMPILE_STATUS)) console.log(gl.getShaderInfoLog(v_shader));
      if (!gl.getShaderParameter(f_shader, gl.COMPILE_STATUS)) console.log(gl.getShaderInfoLog(f_shader));

      shaderprogram = gl.createProgram();
      gl.attachShader(shaderprogram, v_shader);
      gl.attachShader(shaderprogram, f_shader);
      gl.linkProgram(shaderprogram);
      gl.useProgram(shaderprogram);

      a_position  = gl.getAttribLocation(shaderprogram, 'a_position');
      u_transform = gl.getUniformLocation(shaderprogram, 'u_transform');
      u_color     = gl.getUniformLocation(shaderprogram, 'u_color');
      u_pointsize = gl.getUniformLocation(shaderprogram, 'u_pointsize');

      // --- Centered leader fish ---
      all_fish.push(createFish([0, -0.1, 0], [1, 0, 0, 0.7], 1.0, -1));

      // Small fish
      for (let i = 0; i < 100; i++) {
        const random_color  = [Math.random(), Math.random(), Math.random(), Math.random()];
        const random_offset = [Math.random() - Math.random(), Math.random() - Math.random(), 0];
        const random_scale  = Math.random() * 0.3;
        const dir           = 1;
        all_fish.push(createFish(random_offset, random_color, random_scale, dir));
      }

      animate();
    };

    function createFish(offset, color, scale, direction) {
      const vertices = new Float32Array([
        0.5,  0.0,  0.0,
        0.2,  0.25, 0.0,
       -0.2,  0.15, 0.0,
       -0.4,  0.3,  0.0,
       -0.4, -0.3,  0.0,
       -0.2, -0.15, 0.0,
        0.2, -0.25, 0.0
      ]);
      const indices = new Uint8Array([0,1,6,1,2,6,2,5,6,2,3,5,3,4,5]);

      const eye_vertex = (direction === -1)
        ? new Float32Array([0.2, -0.2, 0.0])
        : new Float32Array([0.2,  0.2, 0.0]);

      const v_buffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, v_buffer);
      gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);

      const i_buffer = gl.createBuffer();
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, i_buffer);
      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);

      const eye_v_buffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, eye_v_buffer);
      gl.bufferData(gl.ARRAY_BUFFER, eye_vertex, gl.STATIC_DRAW);
      gl.bindBuffer(gl.ARRAY_BUFFER, null);

      return [v_buffer, i_buffer, eye_v_buffer, new Float32Array(color), new Float32Array(offset), scale, direction];
    }

    function animate() {
      requestAnimationFrame(animate);
      gl.clearColor(0,0,0,0);
      gl.clear(gl.COLOR_BUFFER_BIT);

      gl.enable(gl.BLEND);
      gl.blendEquation(gl.FUNC_ADD);
      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
      gl.disable(gl.DEPTH_TEST);

      const t = performance.now() * 0.001;

      for (let r = 0; r < all_fish.length; r++) {
        const [v_buf, i_buf, eye_buf, color, offset, scale, direction] = all_fish[r];
        let current_color = color;

        // --- Directional movement + wrap ---
        if (direction === 1) {
          offset[0] += 0.01;
          if (offset[0] >= 1.02) offset[0] = -1.02;
        } else {
          offset[0] -= 0.01;
          if (offset[0] <= -1.02) offset[0] = 1.02;
        }

        // --- Smaller wiggle for red fish ---
        const wiggle = (r === 0) ? 0.03 : 0.1;
        offset[1] += wiggle * Math.random();
        offset[1] -= wiggle * Math.random();

        // --- Colors ---
        if (r === 0) {
          current_color = new Float32Array([1, 0, 0, 0.7]);
        } else {
          const a = 0.6 + 0.4 * Math.sin(t * 2.0);
          current_color = new Float32Array([
            0.3 + 0.2 * Math.sin(t + 0.0),
            0.6 + 0.2 * Math.sin(t + 2.0),
            0.9 + 0.1 * Math.sin(t + 4.0),
            a
          ]);
        }
        gl.uniform4fv(u_color, current_color);

        // --- Transform with rotation, scale, and direction ---
        const theta = Math.random() * 10 * Math.PI / 180;
        const c0 = Math.cos(theta), s0 = Math.sin(theta);
        const sx = direction * scale;
        const sy = direction * scale;
        const sz = direction * scale;

        const transform = new Float32Array([
          sx * c0, s0, 0, 0,
          -s0, sy * c0, 0, 0,
          0, 0, sz, 0,
          offset[0], offset[1], 0, 1
        ]);
        gl.uniformMatrix4fv(u_transform, false, transform);

        // Draw fish
        gl.bindBuffer(gl.ARRAY_BUFFER, v_buf);
        gl.vertexAttribPointer(a_position, 3, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(a_position);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, i_buf);
        gl.drawElements(gl.TRIANGLES, 15, gl.UNSIGNED_BYTE, 0);

        // Draw eye
        gl.uniform4fv(u_color, new Float32Array([0,0,0,0.5]));
        gl.uniform1fv(u_pointsize, new Float32Array([scale * 20.0]));
        gl.bindBuffer(gl.ARRAY_BUFFER, eye_buf);
        gl.vertexAttribPointer(a_position, 3, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(a_position);
        gl.drawArrays(gl.POINTS, 0, 1);
      }
    }
  </script>

  <body>
    <canvas id="c"></canvas>
  </body>
</html>
